// Code generated by Stan version 2.5

#include <stan/model/model_header.hpp>
#include <stan/common/command.hpp>

namespace deg_full_over_model_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
using namespace stan::prob;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

class deg_full_over_model : public prob_grad {
private:
    int N;
    int D;
    int M;
    vector_d off;
    vector<int> degree;
    vector_d mass;
    matrix_d diet;
    matrix_d move;
    matrix_d vcv;
    matrix_d adj;
    matrix_d vcv_inv;
public:
    deg_full_over_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        static const char* function__ = "deg_full_over_model_namespace::deg_full_over_model(%1%)";
        (void) function__; // dummy call to supress warning
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        context__.validate_dims("data initialization", "N", "int", context__.to_vec());
        N = int(0);
        vals_i__ = context__.vals_i("N");
        pos__ = 0;
        N = vals_i__[pos__++];
        context__.validate_dims("data initialization", "D", "int", context__.to_vec());
        D = int(0);
        vals_i__ = context__.vals_i("D");
        pos__ = 0;
        D = vals_i__[pos__++];
        context__.validate_dims("data initialization", "M", "int", context__.to_vec());
        M = int(0);
        vals_i__ = context__.vals_i("M");
        pos__ = 0;
        M = vals_i__[pos__++];
        stan::math::validate_non_negative_index("off", "N", N);
        off = vector_d(N);
        context__.validate_dims("data initialization", "off", "vector_d", context__.to_vec(N));
        vals_r__ = context__.vals_r("off");
        pos__ = 0;
        size_t off_i_vec_lim__ = N;
        for (size_t i_vec__ = 0; i_vec__ < off_i_vec_lim__; ++i_vec__) {
            off[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "degree", "int", context__.to_vec(N));
        stan::math::validate_non_negative_index("degree", "N", N);
        degree = std::vector<int>(N,int(0));
        vals_i__ = context__.vals_i("degree");
        pos__ = 0;
        size_t degree_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < degree_limit_0__; ++i_0__) {
            degree[i_0__] = vals_i__[pos__++];
        }
        stan::math::validate_non_negative_index("mass", "N", N);
        mass = vector_d(N);
        context__.validate_dims("data initialization", "mass", "vector_d", context__.to_vec(N));
        vals_r__ = context__.vals_r("mass");
        pos__ = 0;
        size_t mass_i_vec_lim__ = N;
        for (size_t i_vec__ = 0; i_vec__ < mass_i_vec_lim__; ++i_vec__) {
            mass[i_vec__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "diet", "matrix_d", context__.to_vec(N,D));
        stan::math::validate_non_negative_index("diet", "N", N);
        stan::math::validate_non_negative_index("diet", "D", D);
        diet = matrix_d(N,D);
        vals_r__ = context__.vals_r("diet");
        pos__ = 0;
        size_t diet_m_mat_lim__ = N;
        size_t diet_n_mat_lim__ = D;
        for (size_t n_mat__ = 0; n_mat__ < diet_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < diet_m_mat_lim__; ++m_mat__) {
                diet(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "move", "matrix_d", context__.to_vec(N,M));
        stan::math::validate_non_negative_index("move", "N", N);
        stan::math::validate_non_negative_index("move", "M", M);
        move = matrix_d(N,M);
        vals_r__ = context__.vals_r("move");
        pos__ = 0;
        size_t move_m_mat_lim__ = N;
        size_t move_n_mat_lim__ = M;
        for (size_t n_mat__ = 0; n_mat__ < move_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < move_m_mat_lim__; ++m_mat__) {
                move(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "vcv", "matrix_d", context__.to_vec(N,N));
        stan::math::validate_non_negative_index("vcv", "N", N);
        stan::math::validate_non_negative_index("vcv", "N", N);
        vcv = matrix_d(N,N);
        vals_r__ = context__.vals_r("vcv");
        pos__ = 0;
        size_t vcv_m_mat_lim__ = N;
        size_t vcv_n_mat_lim__ = N;
        for (size_t n_mat__ = 0; n_mat__ < vcv_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < vcv_m_mat_lim__; ++m_mat__) {
                vcv(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }
        context__.validate_dims("data initialization", "adj", "matrix_d", context__.to_vec(N,N));
        stan::math::validate_non_negative_index("adj", "N", N);
        stan::math::validate_non_negative_index("adj", "N", N);
        adj = matrix_d(N,N);
        vals_r__ = context__.vals_r("adj");
        pos__ = 0;
        size_t adj_m_mat_lim__ = N;
        size_t adj_n_mat_lim__ = N;
        for (size_t n_mat__ = 0; n_mat__ < adj_n_mat_lim__; ++n_mat__) {
            for (size_t m_mat__ = 0; m_mat__ < adj_m_mat_lim__; ++m_mat__) {
                adj(m_mat__,n_mat__) = vals_r__[pos__++];
            }
        }

        // validate data
        try { 
            check_greater_or_equal(function__,N,0,"N", (double *)0);
        } catch (const std::exception& e) { 
            throw std::domain_error(std::string("Invalid value of N: ") + std::string(e.what()));
        };
        for (int k0__ = 0; k0__ < N; ++k0__) {
            try { 
                check_greater_or_equal(function__,degree[k0__],0,"degree[k0__]", (double *)0);
            } catch (const std::exception& e) { 
                throw std::domain_error(std::string("Invalid value of degree: ") + std::string(e.what()));
            };
        }
        stan::math::validate_non_negative_index("vcv_inv", "N", N);
        stan::math::validate_non_negative_index("vcv_inv", "N", N);
        vcv_inv = matrix_d(N,N);

        stan::math::assign(vcv_inv, inverse(vcv));

        // validate transformed data

        // set parameter ranges
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        ++num_params_r__;
        ++num_params_r__;
        num_params_r__ += M;
        num_params_r__ += D;
        ++num_params_r__;
        num_params_r__ += N;
        ++num_params_r__;
    }

    ~deg_full_over_model() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__) const {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;


        if (!(context__.contains_r("beta_inter")))
            throw std::runtime_error("variable beta_inter missing");
        vals_r__ = context__.vals_r("beta_inter");
        pos__ = 0U;
        context__.validate_dims("initialization", "beta_inter", "double", context__.to_vec());
        double beta_inter(0);
        beta_inter = vals_r__[pos__++];
        try { writer__.scalar_unconstrain(beta_inter); } catch (const std::exception& e) {  throw std::runtime_error(std::string("Error transforming variable beta_inter: ") + e.what()); }

        if (!(context__.contains_r("beta_mass")))
            throw std::runtime_error("variable beta_mass missing");
        vals_r__ = context__.vals_r("beta_mass");
        pos__ = 0U;
        context__.validate_dims("initialization", "beta_mass", "double", context__.to_vec());
        double beta_mass(0);
        beta_mass = vals_r__[pos__++];
        try { writer__.scalar_unconstrain(beta_mass); } catch (const std::exception& e) {  throw std::runtime_error(std::string("Error transforming variable beta_mass: ") + e.what()); }

        if (!(context__.contains_r("beta_move")))
            throw std::runtime_error("variable beta_move missing");
        vals_r__ = context__.vals_r("beta_move");
        pos__ = 0U;
        context__.validate_dims("initialization", "beta_move", "vector_d", context__.to_vec(M));
        vector_d beta_move(M);
        for (int j1__ = 0U; j1__ < M; ++j1__)
            beta_move(j1__) = vals_r__[pos__++];
        try { writer__.vector_unconstrain(beta_move); } catch (const std::exception& e) {  throw std::runtime_error(std::string("Error transforming variable beta_move: ") + e.what()); }

        if (!(context__.contains_r("beta_diet")))
            throw std::runtime_error("variable beta_diet missing");
        vals_r__ = context__.vals_r("beta_diet");
        pos__ = 0U;
        context__.validate_dims("initialization", "beta_diet", "vector_d", context__.to_vec(D));
        vector_d beta_diet(D);
        for (int j1__ = 0U; j1__ < D; ++j1__)
            beta_diet(j1__) = vals_r__[pos__++];
        try { writer__.vector_unconstrain(beta_diet); } catch (const std::exception& e) {  throw std::runtime_error(std::string("Error transforming variable beta_diet: ") + e.what()); }

        if (!(context__.contains_r("sigma_phy")))
            throw std::runtime_error("variable sigma_phy missing");
        vals_r__ = context__.vals_r("sigma_phy");
        pos__ = 0U;
        context__.validate_dims("initialization", "sigma_phy", "double", context__.to_vec());
        double sigma_phy(0);
        sigma_phy = vals_r__[pos__++];
        try { writer__.scalar_lb_unconstrain(0,sigma_phy); } catch (const std::exception& e) {  throw std::runtime_error(std::string("Error transforming variable sigma_phy: ") + e.what()); }

        if (!(context__.contains_r("phy")))
            throw std::runtime_error("variable phy missing");
        vals_r__ = context__.vals_r("phy");
        pos__ = 0U;
        context__.validate_dims("initialization", "phy", "vector_d", context__.to_vec(N));
        vector_d phy(N);
        for (int j1__ = 0U; j1__ < N; ++j1__)
            phy(j1__) = vals_r__[pos__++];
        try { writer__.vector_unconstrain(phy); } catch (const std::exception& e) {  throw std::runtime_error(std::string("Error transforming variable phy: ") + e.what()); }

        if (!(context__.contains_r("phi")))
            throw std::runtime_error("variable phi missing");
        vals_r__ = context__.vals_r("phi");
        pos__ = 0U;
        context__.validate_dims("initialization", "phi", "double", context__.to_vec());
        double phi(0);
        phi = vals_r__[pos__++];
        try { writer__.scalar_lb_unconstrain(0,phi); } catch (const std::exception& e) {  throw std::runtime_error(std::string("Error transforming variable phi: ") + e.what()); }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double,Eigen::Dynamic,1>& params_r) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(vector<T__>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        T__ beta_inter;
        (void) beta_inter;   // dummy to suppress unused var warning
        if (jacobian__)
            beta_inter = in__.scalar_constrain(lp__);
        else
            beta_inter = in__.scalar_constrain();

        T__ beta_mass;
        (void) beta_mass;   // dummy to suppress unused var warning
        if (jacobian__)
            beta_mass = in__.scalar_constrain(lp__);
        else
            beta_mass = in__.scalar_constrain();

        Eigen::Matrix<T__,Eigen::Dynamic,1>  beta_move;
        (void) beta_move;   // dummy to suppress unused var warning
        if (jacobian__)
            beta_move = in__.vector_constrain(M,lp__);
        else
            beta_move = in__.vector_constrain(M);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  beta_diet;
        (void) beta_diet;   // dummy to suppress unused var warning
        if (jacobian__)
            beta_diet = in__.vector_constrain(D,lp__);
        else
            beta_diet = in__.vector_constrain(D);

        T__ sigma_phy;
        (void) sigma_phy;   // dummy to suppress unused var warning
        if (jacobian__)
            sigma_phy = in__.scalar_lb_constrain(0,lp__);
        else
            sigma_phy = in__.scalar_lb_constrain(0);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  phy;
        (void) phy;   // dummy to suppress unused var warning
        if (jacobian__)
            phy = in__.vector_constrain(N,lp__);
        else
            phy = in__.vector_constrain(N);

        T__ phi;
        (void) phi;   // dummy to suppress unused var warning
        if (jacobian__)
            phi = in__.scalar_lb_constrain(0,lp__);
        else
            phi = in__.scalar_lb_constrain(0);


        // transformed parameters
        T__ sig_phy_sq;
        (void) sig_phy_sq;   // dummy to suppress unused var warning

        // initialized transformed params to avoid seg fault on val access
        stan::math::fill(sig_phy_sq,DUMMY_VAR__);

        stan::math::assign(sig_phy_sq, (sigma_phy * sigma_phy));

        // validate transformed parameters
        if (stan::math::is_uninitialized(sig_phy_sq)) {
            std::stringstream msg__;
            msg__ << "Undefined transformed parameter: sig_phy_sq";
            throw std::runtime_error(msg__.str());
        }

        const char* function__ = "validate transformed params %1%";
        (void) function__; // dummy to suppress unused var warning
        try { 
            check_greater_or_equal(function__,sig_phy_sq,0,"sig_phy_sq", (double *)0);
        } catch (const std::exception& e) { 
            throw std::domain_error(std::string("Invalid value of sig_phy_sq: ") + std::string(e.what()));
        };
        // model body
        {
            Eigen::Matrix<T__,Eigen::Dynamic,1>  mu(N);
            (void) mu;   // dummy to suppress unused var warning
            stan::math::fill(mu,DUMMY_VAR__);
            stan::math::initialize(mu, DUMMY_VAR__);
            lp_accum__.add(normal_log<propto__>(beta_inter, 0, 10));
            lp_accum__.add(normal_log<propto__>(beta_mass, 0, 10));
            for (int i = 1; i <= M; ++i) {
                lp_accum__.add(normal_log<propto__>(get_base1(beta_move,i,"beta_move",1), 0, 10));
            }
            for (int i = 1; i <= D; ++i) {
                lp_accum__.add(normal_log<propto__>(get_base1(beta_diet,i,"beta_diet",1), 0, 10));
            }
            lp_accum__.add(cauchy_log<propto__>(phi, 0, 2.5));
            lp_accum__.add(cauchy_log<propto__>(sigma_phy, 0, 2.5));
            lp_accum__.add(((-(0.5) * N) * log(sig_phy_sq)));
            lp_accum__.add((-(multiply(multiply(transpose(phy),vcv_inv),phy)) / (2 * sig_phy_sq)));
            stan::math::assign(mu, add(add(add(add(add(beta_inter,multiply(beta_mass,mass)),multiply(diet,beta_diet)),multiply(move,beta_move)),phy),log(off)));
            lp_accum__.add(neg_binomial_2_log_log<propto__>(degree, mu, phi));
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("beta_inter");
        names__.push_back("beta_mass");
        names__.push_back("beta_move");
        names__.push_back("beta_diet");
        names__.push_back("sigma_phy");
        names__.push_back("phy");
        names__.push_back("phi");
        names__.push_back("sig_phy_sq");
        names__.push_back("log_lik");
        names__.push_back("mu");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(M);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(D);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "deg_full_over_model_namespace::write_array(%1%)";
        (void) function__; // dummy call to supress warning
        // read-transform, write parameters
        double beta_inter = in__.scalar_constrain();
        double beta_mass = in__.scalar_constrain();
        vector_d beta_move = in__.vector_constrain(M);
        vector_d beta_diet = in__.vector_constrain(D);
        double sigma_phy = in__.scalar_lb_constrain(0);
        vector_d phy = in__.vector_constrain(N);
        double phi = in__.scalar_lb_constrain(0);
        vars__.push_back(beta_inter);
        vars__.push_back(beta_mass);
        for (int k_0__ = 0; k_0__ < M; ++k_0__) {
            vars__.push_back(beta_move[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < D; ++k_0__) {
            vars__.push_back(beta_diet[k_0__]);
        }
        vars__.push_back(sigma_phy);
        for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(phy[k_0__]);
        }
        vars__.push_back(phi);

        if (!include_tparams__) return;
        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__; // dummy call to supress warning
        stan::math::accumulator<double> lp_accum__;

        double sig_phy_sq(0.0);
        (void) sig_phy_sq;   // dummy to suppress unused var warning

        stan::math::assign(sig_phy_sq, (sigma_phy * sigma_phy));

        // validate transformed parameters
        try { 
            check_greater_or_equal(function__,sig_phy_sq,0,"sig_phy_sq", (double *)0);
        } catch (const std::exception& e) { 
            throw std::domain_error(std::string("Invalid value of sig_phy_sq: ") + std::string(e.what()));
        };

        // write transformed parameters
        vars__.push_back(sig_phy_sq);

        if (!include_gqs__) return;
        // declare and define generated quantities
        vector_d log_lik(N);
        (void) log_lik;   // dummy to suppress unused var warning
        vector_d mu(N);
        (void) mu;   // dummy to suppress unused var warning

        stan::math::assign(mu, add(add(add(add(add(beta_inter,multiply(beta_mass,mass)),multiply(diet,beta_diet)),multiply(move,beta_move)),phy),log(off)));
        for (int i = 1; i <= N; ++i) {
            stan::math::assign(get_base1_lhs(log_lik,i,"log_lik",1), neg_binomial_2_log_log(get_base1(degree,i,"degree",1),get_base1(mu,i,"mu",1),phi));
        }

        // validate generated quantities

        // write generated quantities
        for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(log_lik[k_0__]);
        }
        for (int k_0__ = 0; k_0__ < N; ++k_0__) {
            vars__.push_back(mu[k_0__]);
        }

    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng,params_r_vec,params_i_vec,vars_vec,include_tparams,include_gqs,pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }


    void write_csv_header(std::ostream& o__) const {
        stan::io::csv_writer writer__(o__);
        writer__.comma();
        o__ << "beta_inter";
        writer__.comma();
        o__ << "beta_mass";
        for (int k_0__ = 1; k_0__ <= M; ++k_0__) {
            writer__.comma();
            o__ << "beta_move" << '.' << k_0__;
        }
        for (int k_0__ = 1; k_0__ <= D; ++k_0__) {
            writer__.comma();
            o__ << "beta_diet" << '.' << k_0__;
        }
        writer__.comma();
        o__ << "sigma_phy";
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            writer__.comma();
            o__ << "phy" << '.' << k_0__;
        }
        writer__.comma();
        o__ << "phi";
        writer__.comma();
        o__ << "sig_phy_sq";
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            writer__.comma();
            o__ << "log_lik" << '.' << k_0__;
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            writer__.comma();
            o__ << "mu" << '.' << k_0__;
        }
        writer__.newline();
    }

    template <typename RNG>
    void write_csv(RNG& base_rng__,
                   std::vector<double>& params_r__,
                   std::vector<int>& params_i__,
                   std::ostream& o__,
                   std::ostream* pstream__ = 0) const {
        stan::io::reader<double> in__(params_r__,params_i__);
        stan::io::csv_writer writer__(o__);
        static const char* function__ = "deg_full_over_model_namespace::write_csv(%1%)";
        (void) function__; // dummy call to supress warning
        // read-transform, write parameters
        double beta_inter = in__.scalar_constrain();
        writer__.write(beta_inter);
        double beta_mass = in__.scalar_constrain();
        writer__.write(beta_mass);
        vector_d beta_move = in__.vector_constrain(M);
        writer__.write(beta_move);
        vector_d beta_diet = in__.vector_constrain(D);
        writer__.write(beta_diet);
        double sigma_phy = in__.scalar_lb_constrain(0);
        writer__.write(sigma_phy);
        vector_d phy = in__.vector_constrain(N);
        writer__.write(phy);
        double phi = in__.scalar_lb_constrain(0);
        writer__.write(phi);

        // declare, define and validate transformed parameters
        double lp__ = 0.0;
        (void) lp__; // dummy call to supress warning
        stan::math::accumulator<double> lp_accum__;

        double sig_phy_sq(0.0);
        (void) sig_phy_sq;   // dummy to suppress unused var warning

        stan::math::assign(sig_phy_sq, (sigma_phy * sigma_phy));

        try { 
            check_greater_or_equal(function__,sig_phy_sq,0,"sig_phy_sq", (double *)0);
        } catch (const std::exception& e) { 
            throw std::domain_error(std::string("Invalid value of sig_phy_sq: ") + std::string(e.what()));
        };

        // write transformed parameters
        writer__.write(sig_phy_sq);

        // declare and define generated quantities
        vector_d log_lik(N);
        (void) log_lik;   // dummy to suppress unused var warning
        vector_d mu(N);
        (void) mu;   // dummy to suppress unused var warning

        stan::math::assign(mu, add(add(add(add(add(beta_inter,multiply(beta_mass,mass)),multiply(diet,beta_diet)),multiply(move,beta_move)),phy),log(off)));
        for (int i = 1; i <= N; ++i) {
            stan::math::assign(get_base1_lhs(log_lik,i,"log_lik",1), neg_binomial_2_log_log(get_base1(degree,i,"degree",1),get_base1(mu,i,"mu",1),phi));
        }

        // validate generated quantities

        // write generated quantities
        writer__.write(log_lik);
        writer__.write(mu);

        writer__.newline();
    }

    template <typename RNG>
    void write_csv(RNG& base_rng,
                   Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                   std::ostream& o,
                   std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<int> params_i_vec;  // dummy
      write_csv(base_rng, params_r_vec, params_i_vec, o, pstream);
    }

    static std::string model_name() {
        return "deg_full_over_model";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta_inter";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta_mass";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= M; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_move" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= D; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_diet" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_phy";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phy" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "phi";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "sig_phy_sq";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta_inter";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "beta_mass";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= M; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_move" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= D; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta_diet" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_phy";
        param_names__.push_back(param_name_stream__.str());
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phy" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "phi";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__ && !include_tparams__) return;
        param_name_stream__.str(std::string());
        param_name_stream__ << "sig_phy_sq";
        param_names__.push_back(param_name_stream__.str());

        if (!include_gqs__) return;
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "log_lik" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
        for (int k_0__ = 1; k_0__ <= N; ++k_0__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "mu" << '.' << k_0__;
            param_names__.push_back(param_name_stream__.str());
        }
    }

}; // model

} // namespace

typedef deg_full_over_model_namespace::deg_full_over_model stan_model;

